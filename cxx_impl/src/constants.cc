// ISC License
//
// Copyright (c) 2025 Stephen Seo
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
// REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
// AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
// INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
// LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
// OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.

const char *HTML_BODY_FACTORS =
    "<!DOCTYPE html>\n"
    "    <html lang=\"en\">\n"
    "    <head>\n"
    "        <meta charset=\"utf-8\">\n"
    "        <title>Checking Your Browser...</title>\n"
    "        <style>\n"
    "            body {\n"
    "                color: #FFF;\n"
    "                background: #555;\n"
    "                font-family: sans-serif;\n"
    "            }\n"
    "            .center {\n"
    "                text-align: center;\n"
    "                display: block;\n"
    "                margin-left: auto;\n"
    "                margin-right: auto;\n"
    "            }\n"
    "            pre {\n"
    "                font-size: 32px;\n"
    "            }\n"
    "        </style>\n"
    "    </head>\n"
    "    <body>\n"
    "        <h2 class=\"center\">Checking Your Browser...</h2>\n"
    "        <pre id=\"progress\" class=\"center\">Waiting to start "
    "verification...</pre>\n"
    "        <script>\n"
    "            \"use strict\";\n"
    "\n"
    "            const progress_values = [\"-\", \"\\\\\", \"|\", \"/\"];\n"
    "            let progress_idx = 0;\n"
    "            let progress_text = document.getElementById(\"progress\");\n"
    "            function update_anim() {\n"
    "                progress_idx = (progress_idx + 1) % "
    "progress_values.length;\n"
    "                progress_text.innerText = progress_values[\n"
    "                    progress_idx\n"
    "                ];\n"
    "            }\n"
    "            var interval_id = -1;\n"
    "\n"
    "            if (!window.Worker) {\n"
    "                console.warn(\"Workers are not available!?\");\n"
    "            }\n"
    "\n"
    "            const worker = new Worker(\"{JS_FACTORS_URL}\");\n"
    "\n"
    "            worker.addEventListener(\"message\", (message) => {\n"
    "                if (message.data.status === \"done\") {\n"
    "                    if (interval_id >= 0) {\n"
    "                        clearInterval(interval_id);\n"
    "                        interval_id = -1;\n"
    "                    }\n"
    "                    progress_text.innerText = \"Verified.\";\n"
    "                    window.location.reload(true);\n"
    "                } else if (message.data.status === \"error_from_api\") {\n"
    "                    if (interval_id >= 0) {\n"
    "                        clearInterval(interval_id);\n"
    "                        interval_id = -1;\n"
    "                    }\n"
    "                    setTimeout(() => {\n"
    "                        progress_text.innerText = \"Error, verification "
    "failed!\";\n"
    "                    }, 500);\n"
    "                } else if (message.data.status === \"error_decoding\") {\n"
    "                    if (interval_id >= 0) {\n"
    "                        clearInterval(interval_id);\n"
    "                        interval_id = -1;\n"
    "                    }\n"
    "                    setTimeout(() => {\n"
    "                        progress_text.innerText = \"Error, failed to "
    "decode challenge!\";\n"
    "                    }, 500);\n"
    "                } else {\n"
    "                    if (message.data.status === \"Starting...\") {\n"
    "                        if (interval_id >= 0) {\n"
    "                            clearInterval(interval_id);\n"
    "                        }\n"
    "                        interval_id = setInterval(update_anim, 500);\n"
    "                    }\n"
    "                    console.log(message.data.status);\n"
    "                }\n"
    "            });\n"
    "\n"
    "            worker.addEventListener(\"error\", (e) => {\n"
    "                console.error(e.message);\n"
    "                console.error(e.lineno);\n"
    "            });\n"
    "\n"
    "            addEventListener(\"load\", (event) => {\n"
    "                setTimeout(() => {\n"
    "                    worker.postMessage(\"start\");\n"
    "                }, 50);\n"
    "            });\n"
    "        </script>\n"
    "    </body>\n"
    "    </html>\n";

const char *JS_FACTORS_WORKER =
    "\"use strict\";\n"
    "\n"
    "function str_to_value(s) {\n"
    "    let value = 0;\n"
    "    let digit = 0;\n"
    "\n"
    "    for (let idx = s.length; idx-- > 0;) {\n"
    "        let sub_value = parseInt(s[idx]);\n"
    "        for (let didx = 0; didx < digit; ++didx) {\n"
    "            sub_value *= 10;\n"
    "        }\n"
    "        value += sub_value;\n"
    "        ++digit;\n"
    "    }\n"
    "\n"
    "    return value;\n"
    "}\n"
    "\n"
    "function b64_to_val(c) {\n"
    "    c = c.charCodeAt(0);\n"
    "    if (c >= 'A'.charCodeAt(0) && c <= 'Z'.charCodeAt(0)) {\n"
    "        return c - 'A'.charCodeAt(0);\n"
    "    } else if (c >= 'a'.charCodeAt(0) && c <= 'z'.charCodeAt(0)) {\n"
    "        return c - 'a'.charCodeAt(0) + 26;\n"
    "    } else if (c >= '0'.charCodeAt(0) && c <= '9'.charCodeAt(0)) {\n"
    "        return c - '0'.charCodeAt(0) + 52;\n"
    "    } else if (c === '+'.charCodeAt(0)) {\n"
    "        return 62;\n"
    "    } else if (c === '/'.charCodeAt(0)) {\n"
    "        return 63;\n"
    "    } else {\n"
    "        return 0xFF;\n"
    "    }\n"
    "}\n"
    "\n"
    "function b64_to_str(b64) {\n"
    "    let out = \"\";\n"
    "\n"
    "    let current = 0;\n"
    "    let current_len = 0;\n"
    "    let temp = 0;\n"
    "\n"
    "    for (let idx = 0; idx < b64.length; ++idx) {\n"
    "        temp = b64_to_val(b64[idx]);\n"
    "        if (temp === 0xFF) {\n"
    "            return undefined;\n"
    "        }\n"
    "        current = (current << 6) + temp;\n"
    "        current_len += 6;\n"
    "        while (current_len >= 4) {\n"
    "            temp = current_len - 4;\n"
    "            temp = current >> temp;\n"
    "            if (temp < 10) {\n"
    "                out += new String(temp);\n"
    "            }\n"
    "            current_len -= 4;\n"
    "            temp = 0;\n"
    "            for (let temp2 = 0; temp2 < current_len; ++temp2) {\n"
    "                temp = (temp << 1) | 1;\n"
    "            }\n"
    "            current = current & temp;\n"
    "        }\n"
    "    }\n"
    "    if (current_len == 2 && current != 3) {\n"
    "        return undefined;\n"
    "    }\n"
    "\n"
    "    return out;\n"
    "}\n"
    "\n"
    "function getFactors() {\n"
    "    let value = \"{LARGE_NUMBER}\";\n"
    "    value = b64_to_str(value);\n"
    "    if (value === undefined) {\n"
    "        postMessage({status: \"error_decoding\"});\n"
    "        return;\n"
    "    }\n"
    "    let factor = 2;\n"
    "    let factor_count = 0;\n"
    "    let f_str = \"\";\n"
    "    let iter = 0;\n"
    "\n"
    "    while (1) {\n"
    "        let div_str = \"\";\n"
    "        let modulus_str = \"\";\n"
    "        let mod = 0;\n"
    "        for (let idx = 0; idx < value.length; ++idx) {\n"
    "            let v_value = str_to_value(value[idx]);\n"
    "\n"
    "            let div = parseInt((mod * 10 + v_value) / factor);\n"
    "            mod = (mod * 10 + v_value) % factor;\n"
    "            if (div_str.length !== 0 || div !== 0) {\n"
    "                div_str += div;\n"
    "            }\n"
    "        }\n"
    "\n"
    "        if (mod === 0) {\n"
    "            ++factor_count;\n"
    "\n"
    "            if (div_str === \"1\") {\n"
    "                if (f_str.length !== 0) {\n"
    "                    f_str += \" \";\n"
    "                }\n"
    "                f_str += new String(factor) + \"x\" + new "
    "String(factor_count);\n"
    "                break;\n"
    "            } else {\n"
    "                value = div_str;\n"
    "            }\n"
    "        } else {\n"
    "            if (factor_count !== 0) {\n"
    "                if (f_str.length !== 0) {\n"
    "                    f_str += \" \";\n"
    "                }\n"
    "                f_str += new String(factor) + \"x\" + new "
    "String(factor_count);\n"
    "            }\n"
    "            factor += 1;\n"
    "            factor_count = 0;\n"
    "        }\n"
    "    }\n"
    "\n"
    "    let xhr = new XMLHttpRequest();\n"
    "    let url = \"{API_URL}\";\n"
    "    xhr.open(\"POST\", url, true);\n"
    "    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n"
    "    xhr.onreadystatechange = function () {\n"
    "        if (xhr.readyState === 4) {\n"
    "            if (xhr.status === 200) {\n"
    "                postMessage({status: \"done\"});\n"
    "            } else {\n"
    "                postMessage({status: \"error_from_api\"});\n"
    "            }\n"
    "        }\n"
    "    };\n"
    "    let data = JSON.stringify({\"type\": \"factors\",\n"
    "                               \"id\": \"{UUID}\",\n"
    "                               \"factors\": f_str});\n"
    "    xhr.send(data);\n"
    "}\n"
    "\n"
    "addEventListener(\"message\", (message) => {\n"
    "    if (message.data === \"start\") {\n"
    "        postMessage({status: \"Starting...\"});\n"
    "        getFactors();\n"
    "    } else {\n"
    "        postMessage({status: \"Invalid start message.\"});\n"
    "    }\n"
    "});\n";
